#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mybackend:server');
var fs = require('fs');
var http = require('http');
var https = require('https');

// var privateKey = fs.readFileSync('sslcert/key.pem')
var privateKey = fs.readFileSync('sslcert/www.hindujatech.com.key');

var certificate = fs.readFileSync('sslcert/cert.pem');
var credentials = { key: privateKey, cert: certificate };


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3695');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
console.log("port",port)
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);


// https
var httpsServer = https.createServer(credentials, app);

httpsServer.listen(3695);


//Why me??
var io = require('socket.io').listen(httpsServer);
io.sockets.on('connection', function(socket) {
    console.log('Socket connected');
    // Socket event for gist created
    socket.on('rm_approved', function(data) {
        io.emit('rm_approved', data);
    });

    // Socket event for gist updated
    socket.on('employee_submitted', function(data) {
        io.emit('employee_submitted', data);
    });


    // socket.on('error', function () {
    //   var error = new Error('socket hang up');
    //   error.code = 'ECONNRESET';
    //   error;
    //   io.emit('employee_submitted', error);
    // });
});





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log( server.address().address );

  var addr = server.address();
  
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
